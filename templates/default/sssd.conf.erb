[sssd]
config_file_version = 2

# Number of times services should attempt to reconnect in the
# event of a crash or restart before they give up
reconnection_retries = 3

# If a back end is particularly slow you can raise this timeout here
sbus_timeout = 30
services = nss, pam

# SSSD will not start if you do not configure any domains.
# Add new domain configurations as [domain/<NAME>] sections, and
# then add the list of domains (in the order you want them to be
# queried) to the "domains" attribute below and uncomment it.
# domains = LOCAL,LDAP

domains = default
[nss]
# The following prevents SSSD from searching for the root user/group in
# all domains (you can add here a comma-separated list of system accounts that
# are always going to be /etc/passwd users, or that you want to filter out).
filter_groups = root
filter_users = root
reconnection_retries = 3

# The entry_cache_nowait_percentage indicates the percentage of the
# entry_cache_timeout to wait before updating the cache out-of-band.
# (NSS requests will still be returned from cache until the full
# entry_cache_timeout). Setting this value to 0 turns this feature
# off (default).
# entry_cache_nowait_percentage = 300

[pam]
reconnection_retries = 3

# Example domain configurations
# Note that enabling enumeration in the following configurations will have a
# moderate performance impact while enumerations are actually running, and
# may increase the time necessary to detect network disconnection.
# Consequently, the default value for enumeration is FALSE.
# Refer to the sssd.conf man page for full details.

# Example LOCAL domain that stores all users natively in the SSSD internal
# directory. These local users and groups are not visible in /etc/passwd; it
# now contains only root and system accounts.
# [domain/LOCAL]
# description = LOCAL Users domain
# id_provider = local
# enumerate = true
# min_id = 500
# max_id = 999

# Example native LDAP domain
# ldap_schema can be set to "rfc2307", which uses the "memberuid" attribute
# for group membership, or to "rfc2307bis", which uses the "member" attribute
# to denote group membership. Changes to this setting affect only how we
# determine the groups a user belongs to and will have no negative effect on
# data about the user itself. If you do not know this value, ask an
# administrator.
# [domain/LDAP]
# id_provider = ldap
# auth_provider = ldap
# ldap_schema = rfc2307
# ldap_uri = ldap://ldap.mydomain.org
# ldap_search_base = dc=mydomain,dc=org
# ldap_tls_reqcert = demand
# cache_credentials = true
# enumerate = False
# entry_cache_timeout = 5400

[domain/default]

ldap_uri = <%= node[:authconfig][:ldap][:server] %>
<% if node[:authconfig][:ldap][:dnbase] != '' -%>
	ldap_search_base = <%= node[:authconfig][:ldap][:dnbase] %>
<% end -%>
<% if node[:authconfig][:ldap][:dnbind] != '' -%>
	ldap_default_bind_dn = <%= node[:authconfig][:ldap][:dnbind] %>
<% end -%>
<% if node[:authconfig][:ldap][:rfc2307bis] -%>
	ldap_schema = rfc2307bis
<% else -%>
	ldap_schema = rfc2307
<% end -%>
<% if node[:authconfig][:ldap][:enable] -%>
	id_provider = ldap
<% else -%>
	id_provider = local
<% end -%>
<% if node[:authconfig][:ldap][:auth] -%>
	auth_provider = ldap
<% elsif node[:authconfig][:kerberos][:enable] -%>
	auth_provider = krb5
<% else -%>
	auth_provider = none
<% end -%>
krb5_realm = <%= node[:authconfig][:kerberos][:realm] %>
krb5_server = <%= node[:authconfig][:kerberos][:kdcserver] %>
ldap_tls_cacertdir = <%= node[:authconfig][:ldap][:cacertdir] %>
<% if node[:authconfig][:ldap][:starttls] -%>
	ldap_id_use_start_tls = True
<% else -%>
	ldap_id_use_start_tls = False
<% end -%>
<% if node[:authconfig][:sssd][:cachecreds] -%>
	cache_credentials = True
<% else -%>
	cache_credentials = False
<% end -%>
<% unless node[:authconfig][:ldap][:reqcert] -%>
	ldap_tls_reqcert = never
<% end -%>
<% if node[:authconfig][:ldap][:disable_tls] -%>
	ldap_auth_disable_tls_never_use_in_production = true
<% end -%>
<% if node[:authconfig][:ldap][:bindpw] != '' -%>
	ldap_default_authtok_type = password
	ldap_default_authtok = <%= node[:authconfig][:ldap][:bindpw] %>
<% end -%>

<% if node[:authconfig][:ldap][:server_is_ad] -%>
enumerate = false
min_id = 1000
#ldap_tls_cacert = /etc/pki/tls/certs/ca-bundle.crt
#ldap_tls_cacertdir = /etc/pki/tls/certs
ldap_user_principal = userPrincipalName
ldap_user_fullname = displayName
ldap_user_name = sAMAccountName
ldap_user_object_class = user
ldap_user_home_directory = unixHomeDirectory
ldap_user_shell = msSFU30LoginShell
ldap_user_principal = userPrincipalName
ldap_group_object_class = group
ldap_force_upper_case_realm = True

# nss_map_objectclass posixAccount User
# nss_map_objectclass shadowAccount User
# nss_map_attribute uid sAMAccountName
# nss_map_attribute uniqueMember Member
# nss_map_attribute homeDirectory unixHomeDirectory
# nss_map_objectclass posixGroup Group
# pam_login_attribute sAMAccountName

# ldap_user_uid_number = msSFU30UidNumber
# ldap_user_gid_number = msSFU30GidNumber
# ldap_group_name = msSFU30Name
# ldap_group_gid_number = msSFU30GidNumber

<% else -%>
ldap_group_member = uniqueMember
<% end -%>
